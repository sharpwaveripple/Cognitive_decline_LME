axis.title.x = element_text(margin = margin(t = 20,
r = 0,
b = 0,
l = 0)),
axis.title.y = element_text(margin = margin(t = 0,
r = 20,
b = 0,
l = 0)),
plot.margin = unit(c(1, 1, 1, 1), "cm"))
return(fig)
}
p1 <- make.boxplot(df, df$mean_node_str, "Mean Nodal Strength")
p2 <- make.boxplot(df, df$density, "Density")
p4 <- make.boxplot(df, df$mean_loc_eff, "Mean Local Efficiency")
p3 <- make.boxplot(df, df$glob_eff, "Global Efficiency")
multiplot(p1, p2, p3, p4, cols = 2)
make.boxplot <- function(df, dv, dv.title) {
library(ggplot2)
fig <- ggplot(df, aes(x = groups,
y = dv,
fill = groups)) +
geom_boxplot(outlier.shape = NA)
fig <- fig + scale_fill_grey(start = .4) +
theme_classic() +
labs(y = dv.title, x = 'Groups') +
scale_x_discrete(labels = c('1' = 'Apathy',
'2' = 'Depression',
'3' = 'Comorbid',
'4' = 'Control')) +
theme(legend.position = 'none',
axis.title.x = element_text(margin = margin(t = 20,
r = 0,
b = 0,
l = 0)),
axis.title.y = element_text(margin = margin(t = 0,
r = 20,
b = 0,
l = 0)),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
return(fig)
}
p1 <- make.boxplot(df, df$mean_node_str, "Mean Nodal Strength")
p2 <- make.boxplot(df, df$density, "Density")
p3 <- make.boxplot(df, df$glob_eff, "Global Efficiency")
p4 <- make.boxplot(df, df$mean_loc_eff, "Mean Local Efficiency")
multiplot(p1, p2, p3, p4, cols = 2)
make.boxplot <- function(df, dv, dv.title) {
library(ggplot2)
fig <- ggplot(df, aes(x = groups,
y = dv,
fill = groups)) +
geom_boxplot(outlier.shape = NA)
fig <- fig + scale_fill_grey(start = .4) +
theme_classic() +
labs(y = dv.title, x = 'Groups') +
scale_x_discrete(labels = c('1' = 'Apathy',
'2' = 'Depression',
'3' = 'Comorbid',
'4' = 'Control')) +
theme(legend.position = 'none',
axis.title.x = element_text(margin = margin(t = 15,
r = 0,
b = 0,
l = 0)),
axis.title.y = element_text(margin = margin(t = 0,
r = 15,
b = 0,
l = 0)),
plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm"))
return(fig)
}
p1 <- make.boxplot(df, df$mean_node_str, "Mean Nodal Strength")
p2 <- make.boxplot(df, df$density, "Density")
p3 <- make.boxplot(df, df$glob_eff, "Global Efficiency")
p4 <- make.boxplot(df, df$mean_loc_eff, "Mean Local Efficiency")
multiplot(p1, p2, p3, p4, cols = 2)
data_fname = 'C:/Users/jonat/Desktop/RUN DMC/network_analysis/temp/data_imputed.txt'
data_fname2 = 'C:/Users/jonat/Desktop/RUN DMC/network_analysis/temp/wholebrain_results.txt'
data_fname3 = 'C:/Users/jonat/Desktop/RUN DMC/network_analysis/temp/grouping_var.txt'
df = cbind(read.csv(data_fname, header = T),
read.csv(data_fname2, header = T),
read.csv(data_fname3, header = T))
#df$lacnumb11 <- ordered(df$lacnumb11)
df$groups <- as.factor(df$groups)
library(psych)
med1 = mediate(y = 'aes11_total',
x = 'lacnumb11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med2 = mediate(y = 'aes11_total',
x = 'wmhvolume11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med3 = mediate(y = 'aes11_total',
x = 'glob_eff',
m = 'lacnumb11',
data = df, std = TRUE, n.iter = 10000)
med4 = mediate(y = 'aes11_total',
x = 'glob_eff',
m = 'wmhvolume11',
data = df, std = TRUE, n.iter = 10000)
?mediate.plot
?mediate.diagram
data_fname = 'C:/Users/jonat/Desktop/RUN DMC/network_analysis/temp/data_imputed.txt'
data_fname2 = 'C:/Users/jonat/Desktop/RUN DMC/network_analysis/temp/wholebrain_results.txt'
data_fname3 = 'C:/Users/jonat/Desktop/RUN DMC/network_analysis/temp/grouping_var.txt'
df = cbind(read.csv(data_fname, header = T),
read.csv(data_fname2, header = T),
read.csv(data_fname3, header = T))
df$groups <- as.factor(df$groups)
library(psych)
med1 = mediate(y = 'aes11_total',
x = 'lacnumb11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med2 = mediate(y = 'aes11_total',
x = 'wmhvolume11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med3 = mediate(y = 'aes11_total',
x = 'glob_eff',
m = 'lacnumb11',
data = df, std = TRUE, n.iter = 10000)
med4 = mediate(y = 'aes11_total',
x = 'glob_eff',
m = 'wmhvolume11',
data = df, std = TRUE, n.iter = 10000)
mediate.diagram(med1, digits = 3)
x <- mediate.diagram(med1, digits = 3)
med2 = mediate(y = 'aes11_total',
x = 'wmhvolume11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med1
med1 = mediate(y = 'aes11_total',
x = 'lacnumb11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
fig1 <- mediate.diagram(med1, digits = 3)
fig2 <- mediate.diagram(med1, digits = 3)
fig4 <- mediate.diagram(med1, digits = 3)
fig3 <- mediate.diagram(med1, digits = 3)
med1 = mediate(y = 'aes11_total',
x = 'lacnumb11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med2 = mediate(y = 'aes11_total',
x = 'wmhvolume11',
m = 'glob_eff',
data = df, std = TRUE, n.iter = 10000)
med3 = mediate(y = 'aes11_total',
x = 'glob_eff',
m = 'lacnumb11',
data = df, std = TRUE, n.iter = 10000)
med4 = mediate(y = 'aes11_total',
x = 'glob_eff',
m = 'wmhvolume11',
data = df, std = TRUE, n.iter = 10000)
fig1 <- mediate.diagram(med1, digits = 3)
fig2 <- mediate.diagram(med2, digits = 3)
fig3 <- mediate.diagram(med3, digits = 3)
fig4 <- mediate.diagram(med4, digits = 3)
fig1
fig1 <- mediate.diagram(med1, digits = 3)
fig2 <- mediate.diagram(med2, digits = 3)
fig3 <- mediate.diagram(med3, digits = 3)
fig4 <- mediate.diagram(med4, digits = 3)
load("~/Desktop/data_Jonatha_rundmc.Rdata")
names(data_Joanthan_rundmc)
?aov
load("~/Desktop/data_Jonatha_rundmc.Rdata")
names(data_Joanthan_rundmc)
x <- load('data_Jonatha_rundmc.Rdata')
load("~/Desktop/data_Jonatha_rundmc.Rdata")
data_Joanthan_rundmc$ID
names(data_Joanthan_rundmc)
root <- "C:/Users/jonat/Desktop/ctp/"
file <- "CTP_data.csv"
output <- paste(root, "results.docx", sep = "")
iv.list <- c('DT2', 'DT3', 'DT4', 'DT6', 'DT8', 'DT10',
'CBF30', 'CBF35', 'CBF40', 'CBF45',
'CBV50', 'CBV55', 'CBV60', 'CBV65', 'CBVabs2')
cov <- c('sex', 'age', 'diabetes', 'etiology', 'tPA_delay', 'NIH0', 'Side.R.L')
dv <- 'mRS3'
sig.digits = 2
n.bootstraps = 10000
format.str = paste("%.", sig.digits, "f", sep = "")
compute.raw.roc <- function(roc.formula, df) {
roc.results <- roc(eval(roc.formula), data = df, percent = F)
delong.ci <- ci(roc.results)
point.coor <- coords(roc.results, x = "best")
rowvals <- round(c(delong.ci, point.coor), sig.digits)
return(rowvals)
}
calc.odds.ratios <- function(logistic.formula, df) {
logit <- glm(logistic.formula, data = df, family = binomial)
logit.df <- tidy(logit)
logit.df %>%
mutate(or = exp(estimate),
var.diag = diag(vcov(logit)),
or.se = sqrt(or^2 * var.diag)) -> logit.df
results <- round(cbind(logit.df$or,
logit.df$or.se,
exp(confint(logit)),
logit.df$p.value), sig.digits)
results.format <- matrix(data = sprintf(format.str, results),
nrow = dim(results)[1],
ncol = dim(results)[2],
dimnames = list(rownames(results),
c("Odds ratio",
"Standard error",
"2.5%", "97.5%", "p")))
results.table <- as.table(results.format)
return(results.table)
}
plot.params <- function(roc.smooth, roc.title) {
estimates <- data.frame(sensitivity = unlist(roc.smooth[1]),
specificity = (1 - unlist(roc.smooth[2])))
roc.plot <- ggplot(estimates, aes(specificity, sensitivity)) +
geom_line(color = "red2",
size = 1) +
geom_abline(intercept = 0,
slope = 1,
linetype = "dashed",
size = 1) +
xlab("1 - Specificity") + ylab("Sensitivity") +
ggtitle(roc.title) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
return(roc.plot)
}
library(psych)
library(plyr)
library(dplyr)
library(broom)
library(pROC)
library(ggplot2)
library(ReporteRs)
library(ordinal)
# read data
# dont forget to convert to utf-8 in notepad++
data.raw <- read.csv(paste(root, file, sep = ""), header = T, na.strings = "?")
vars <- c(iv.list, cov, dv)
data.raw <- data.raw[vars]
data.raw <- na.omit(data.raw)
#convert mRS to an ordinal variable
data.raw$mRS3 <- ordered(data.raw$mRS3)
data.raw$diabetes <- as.factor(data.raw$diabetes)
data.raw$etiology
levels(data.raw$etiology) <- c("0", "0", "0", "0", "1", "0",
"0", "0", "0", "0", "0", "0")
########### descriptives ###########
doc <- docx()
ord.list <- character()
num.list <- character()
for (column in names(data.raw)) {
if (is.factor(data.raw[[column]])) {
ord.list <- c(ord.list, column)
} else {
num.list <- c(num.list, column)
}
}
data.ord <- data.raw[ord.list]
data.num <- data.raw[num.list]
descriptives <- round(describe(data.num), sig.digits)
descriptives <- descriptives[c('mean', 'sd', 'min', 'max')]
descriptives.format <- matrix(data = sprintf(format.str, as.matrix(descriptives)),
nrow = dim(descriptives)[1],
ncol = dim(descriptives)[2],
dimnames = list(rownames(descriptives),
c("Mean", "Standard deviation",
"Minimum", "Maximum")))
descriptives.format <- as.table(descriptives.format)
descriptives.table <- vanilla.table(descriptives.format, add.rownames = T)
doc <- addFlexTable(doc, descriptives.table)
doc <- addParagraph(doc, c("", ""))
# frequency tables
for (column in names(data.ord)) {
freq.table <- plyr::count(data.ord[[column]])
colnames(freq.table) <- c(column, "Frequency")
doc <- addFlexTable(doc, vanilla.table(freq.table))
doc <- addParagraph(doc, c(""))
}
######### correlations ############
corr.mat <- corr.test(data.num)
corr.mat.r <- round(corr.mat$r, sig.digits)
corr.mat.p <- round(corr.mat$p, sig.digits)
table.r <- FlexTable(data = corr.mat.r, add.rownames = T,
body.text.props = textProperties(font.size = 8),
body.par.props = parProperties(text.align = "center"),
header.text.props = textProperties(font.size = 8))
table.p <- FlexTable(data = corr.mat.p, add.rownames = T,
body.text.props = textProperties(font.size = 8),
body.par.props = parProperties(text.align = "center"),
header.text.props = textProperties(font.size = 8))
doc <- addSection(doc, landscape = T)
doc <- addParagraph(doc, c("A correlation matrix was generated for all continuous variables. Multiple comparisons were corrected using the Bonferroni-Holm method. Uncorrected values appear below the diagonal, while corrected values are above.", "",""))
doc <- addParagraph(doc, c("Correlation matrix (r)", ""))
doc <- addFlexTable(doc, table.r)
doc <- addParagraph(doc, c("", "", "Correlation matrix (p)", ""))
doc <- addFlexTable(doc, table.p)
doc <- addSection(doc, landscape = F)
######## first, ROC for raw predictors #########
doc <- addParagraph(doc, c("Unsmoothed ROC curves were generated using each predictor. 95% confidence intervals were calculated using DeLong's method.", "", ""))
### poor outcomes ###
for (i in 4:6) {
results <- character()
data.raw['dv.bin'] <- as.factor(as.numeric(data.raw[dv] >= i))
for (iv in iv.list) {
roc.formula <- parse(text = paste("dv.bin ~", iv))
roc.row <- compute.raw.roc(roc.formula, data.raw)
results <- rbind(results, sprintf(format.str, roc.row))
}
rownames(results) <- iv.list
colnames(results) <- c("5%", "AUC", "95%",
"Cut score", "Specificity", "Sensitivity")
results.table <- vanilla.table(results, add.rownames = T)
doc <- addParagraph(doc, c(sprintf("Poor %d", i)))
doc <- addFlexTable(doc, results.table)
doc <- addParagraph(doc, c("", ""))
}
### good outcomes ###
for (i in 1:3) {
results <- character()
data.raw['dv.bin'] <- as.factor(as.numeric(data.raw[dv] <= i))
for (iv in iv.list) {
roc.formula <- parse(text = paste("dv.bin ~", iv))
roc.row <- compute.raw.roc(roc.formula, data.raw)
results <- rbind(results, sprintf(format.str, roc.row))
}
rownames(results) <- iv.list
colnames(results) <- c("5%", "AUC", "95%",
"Cut score", "Specificity", "Sensitivity")
results.table <- vanilla.table(results, add.rownames = T)
doc <- addParagraph(doc, c(sprintf("Good %d", i)))
doc <- addFlexTable(doc, results.table)
doc <- addParagraph(doc, c("", ""))
}
########### logistic regressions ############
doc <- addParagraph(doc, c("Binary logistic regressions were calculated for each independent variable. Standard errors for odds ratios were estimated using the delta method (Dowd et al., 2014). Predicted probabilities for each model were then used in an ROC analysis. ROC curves were smoothed using a smooth kernel density of control and case observations (Zhou et al., 1997). 95% confidence intervals were constructed using 10,000 stratified bootstrap replicates.", "", ""))
for (i in 4:6) {
data.raw['dv.bin'] <- as.factor(as.numeric(data.raw[dv] >= i))
results.roc <- character()
for (iv in iv.list) {
logistic.formula <- paste("dv.bin ~", iv, "+", paste(cov, collapse = " + "))
results <- calc.odds.ratios(logistic.formula, data.raw)
results.table <- vanilla.table(results, add.rownames = T)
doc <- addParagraph(doc, c(sprintf("Poor %d", i)))
doc <- addFlexTable(doc, results.table)
doc <- addParagraph(doc, c("", ""))
# using the predicted probabilities from the logit, build a ROC
prob <- predict(logit, type = "response")
roc.results <- roc(dv.bin ~ prob, data = data.raw, percent = F)
roc.smooth <- smooth(roc.results, method = "density")
boot.ci <- ci(roc.smooth, boot.n = n.bootstraps)
rowvals <- sprintf(format.str, round(boot.ci, sig.digits))
results.roc <- rbind(results.roc, rowvals)
#plot.title <- paste()
#plot.params <- data.frame(sensitivity = unlist(roc.smooth[1]),
#                          specificity = (1 - unlist(roc.smooth[2])))
roc.plot <- ggplot(plot.params, aes(specificity, sensitivity)) +
geom_line(color = "red2",
size = 1) +
geom_abline(intercept = 0,
slope = 1,
linetype = "dashed",
size = 1) +
xlab("1 - Specificity") + ylab("Sensitivity") +
ggtitle(paste(iv)) +
theme(plot.title = element_text(hjust = 0.5)) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
doc <- addPlot(doc, fun = function() print(roc.plot), width = 2, height = 2)
doc <- addParagraph(doc, c("", ""))
}
rownames(results.roc) <- iv.list
colnames(results.roc) <- c("5%", "AUC", "95%")
results.table <- vanilla.table(results.roc, add.rownames = T)
doc <- addParagraph(doc, c(sprintf("Poor %d", i)))
doc <- addFlexTable(doc, results.table)
doc <- addParagraph(doc, c("", ""))
}
results
logit <- glm(logistic.formula, data=df, family=binomial)
logit <- glm(logistic.formula, data=data.raw, family=binomial)
logit
tidy(logit)
tidy(logit, digits=2)
iv="CBF30"
logistic.formula <- paste("dv.bin ~", iv, "+", paste(cov, collapse = " + "))
logit <- glm(logistic.formula, data=data.raw, family=binomial)
logit
tidy(logit)
summary(logit)
summary(logit, digits=2)
?summary
summary(logit, 2)
summary(logit, digits=3)
summary(logit, digits=2)
library(mice)
wd <- getwd()
datafile <- paste(wd, "data_for_R.csv", sep="/")
df <- read.csv(datafile)
nImps <- 5
imp_method <- "pmm"
nIter <- 5
imp_data = mice(df, m = nImps, method = imp_method, seed = 1105, maxit = nIter)
imp_data_means = 0
for(i in 1:nImps) {
imp_data_means = imp_data_means + complete(imp_data,i)
}
imp_data_means = imp_data_means/nImps
pca <- prcomp(imp_data_means,
center = T,
scale = T)
print(pca)
datafile
script.dir <- dirname(sys.frame(1)$ofile)
library(mice)
wd <- "C:/Users/jonat/Desktop/RUN DMC/SEM_lav"
#wd <- getwd()
datafile <- paste(wd, "data_for_R.csv", sep="/")
df <- read.csv(datafile)
nImps <- 5
imp_method <- "pmm"
nIter <- 5
imp_data = mice(df, m = nImps, method = imp_method, seed = 1105, maxit = nIter)
imp_data_means = 0
for(i in 1:nImps) {
imp_data_means = imp_data_means + complete(imp_data,i)
}
imp_data_means = imp_data_means/nImps
pca <- prcomp(imp_data_means,
center = T,
scale = T)
print(pca)
pca
loadings <- pca$rotation
loadings
loadings$PC1
setwd("C:/Users/jonat/Desktop/esther/scripts/models")
library(lavaan)
variables <- c("wmh", "hv")
timepoints <- c("06", "11", "15")
var.names <- c(as.vector(outer(variables, timepoints, paste, sep="")))
datafile <- "../../data/RUNDMC_datasheet_long.csv"
df <- read.csv(datafile, sep="\t")
df.subset <- df[var.names]
model <- readLines("wmh_hv_trajectory.lav")
fit <- sem(model,
data=df.subset)
summary(fit)
install.packages("semPlot")
library(semPlot)
semPaths(fit, layout=L, rotation=3)
semPaths(fit)
summary(fit)
coef(fit)
coef(fit, standardized=T)
fitMeasures(fit)
df.subset <- df.subset[complete.cases(df.subset), ]
model <- readLines("wmh_hv_trajectory.lav")
fit <- sem(model,
data=df.subset)
inspect(fit, "cov.lv")
resid(fit, type="cpr")
resid(fit, type="cor")
setwd("..")
variables <- c("wmh", "hv")
timepoints <- c("06", "11", "15")
var.names <- as.vector(outer(variables, timepoints, paste, sep=""))
datafile <- "../data/RUNDMC_datasheet_long.csv"
df <- read.csv(datafile, sep="\t")
df.subset <- df[var.names]
df.subset <- df.subset[complete.cases(df.subset), ]
hist(df.subset)
variables <- c("wmh", "hv")
timepoints <- c("06", "11", "15")
var.names <- as.vector(outer(variables, timepoints, paste, sep=""))
wmh.names <- var.names[seq(1, length(var.names), 2)]
datafile <- "../data/RUNDMC_datasheet_long.csv"
df <- read.csv(datafile, sep="\t")
df.subset <- df[var.names]
df.subset <- df.subset[complete.cases(df.subset), ]
df.subset[wmh.names] <- log(df.subset[wmh.names])
hist(df.subset)
ls
setwd("models")
library(lavaan)
variables <- c("wmh", "hv")
timepoints <- c("06", "11", "15")
var.names <- c(as.vector(outer(variables, timepoints, paste, sep="")))
wmh.names <- var.names[seq(1, length(var.names), 2)]
datafile <- "../../data/RUNDMC_datasheet_long.csv"
df <- read.csv(datafile, sep="\t")
df.subset <- df[var.names]
df.subset <- df.subset[complete.cases(df.subset), ]
df.subset[wmh.names] <- log(df.subset[wmh.names])
model <- readLines("wmh_hv_trajectory.lav")
fit <- sem(model,
data=df.subset)
summary(fit, standardized=T)
semPlot(fit)
library(semPlot)
semPaths(fit)
fitMeasures(fit)
hist(df.subset)
